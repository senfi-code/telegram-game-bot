import sqlite3
import asyncio
import os, hashlib
import random

from aiogram import F, Router, Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import FSInputFile
from aiogram.types import TextQuote

from aiogram.types import WebAppInfo
from aiogram.types import InputTextMessageContent, InlineQueryResultArticle, InlineQuery
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, InlineKeyboardMarkup, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove

from cfg import ADMIN_ID

from application.primary.src import ENERGY_START
from application.primary.src import EMOJI_HI

import application.keyboards as kb


router = Router()


class make(StatesGroup):
    nick = State()


conn = sqlite3.connect('database.db')
cursor = conn.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS users(
    id INTEGER,
    nick TEXT,
    money INTEGER,
    bonus_last INTEGER,
    car_name TEXT,
    home_name TEXT,
    phone_name TEXT,
    energy INTEGER,
    lvl INTEGER,
    admin INTEGER,
    status TEXT,
    work INTEGER,
    work_name TEXT,
    work_zp INTEGER,
    ban INTEGER,
    bank INTEGER,
    clan_status INTEGER,
    clan_name TEXT
)""")


@router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot):
    usrid = message.chat.id

    info = cursor.execute(f"SELECT id FROM users WHERE id = {usrid}").fetchone()
    if info is None:
        cursor.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (
            usrid, message.from_user.first_name, 15000, 0, "‚ùå", "‚ùå",
            "‚ùå", ENERGY_START, 1, 0, "–ò–≥—Ä–æ–∫", 0, "–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π", 0, 0, 0, 0, "‚ùå"))
        conn.commit()

        await message.answer(f"{EMOJI_HI}", reply_markup=kb.start_keyboard())

        await message.answer("<b>‚≠êÔ∏è –ü—Ä–∏–≤–µ—Ç, –∏–≥—Ä–æ–∫ ! –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º ? –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –∏–≥—Ä –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö Telegram ! –ù–∞—á–Ω–∏ –∏–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å !</b>", parse_mode='HTML', reply_markup=kb.start_inline())

    else:
        await message.answer("<b>üì≤ –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é....</b>", parse_mode='HTML', reply_markup=kb.start_keyboard())


@router.message(F.text == "‚ùì")
async def reports(message: Message) -> None:
    await message.answer("<b>‚ùóÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å - spectagram.t.me !</b>", parse_mode='HTML')



@router.message(F.text.lower().in_(["–û–≥—Ä–∞–±–∏—Ç—å", "–û–≥—Ä–∞–±–∏—Ç—å –∫–∞–∑–Ω—É", "–∫–∞–∑–Ω–∞"]))
async def cazna(message: Message, bot: Bot):
    baninf = cursor.execute(f"SELECT ban FROM users WHERE id = {message.chat.id}").fetchone()
    if baninf[0] == 0:
        usernick = cursor.execute(f'SELECT nick FROM users WHERE id = {message.chat.id}').fetchone()
        energyu = cursor.execute(f'SELECT energy FROM users WHERE id = {message.chat.id}').fetchone()
        if energyu[0] < 1:
            await message.answer("<b>üîÆ –£ –≤–∞—Å –º–∞–ª–æ —ç–Ω–µ—Ä–≥–∏–∏ !</b>", parse_mode='HTML')
        else:
            give_money = random.randint(3000, 15000)
            random_photo = random.SystemRandom().choice(
                ["https://proumdom.ru/wp-content/uploads/2020/12/21567875464789.jpg",
                 "https://media.1777.ru/images/images_processing/881/8817189501727565.jpeg",
                 "https://news.store.rambler.ru/img/dfc6a83e751a8f423e52f62ebb426346?img-format=auto&img-1-resize=height:710",
                 "https://liter.kz/cache/imagine/1200/uploads/news/2022/03/18/62345d2b2ec99547306734.jpg"])
            await bot.send_photo(chat_id=message.chat.id, photo=random_photo,
                           caption=f"<b>üí∞ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–±–∏–ª–∏ –±–∞–Ω–∫ –∏ –ø–æ–ª—É—á–∏–ª–∏ {give_money} $AETH !</b>", parse_mode='HTML')
            cursor.execute(f"UPDATE users SET money = money + ? WHERE id = {message.chat.id}", (give_money,))
            cursor.execute(f"UPDATE users SET energy = energy - 1 WHERE id = {message.chat.id}")
        
    conn.commit()


@router.message(F.text == "‚ÑπÔ∏è")
async def info(message: Message):
    await message.answer("<b>üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:\n\n1Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–æ–µ\n2Ô∏è‚É£ –ò–≥—Ä—ã\n3Ô∏è‚É£ –ö–ª–∞–Ω—ã</b>", parse_mode='HTML', reply_markup=kb.info())


@router.callback_query(F.data == "home")
async def home(callback: CallbackQuery) -> None:
    button1 = InlineKeyboardButton(text="üîö –ù–∞–∑–∞–¥", callback_data="home_back")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [button1],
    ])

    await callback.message.edit_text("""
<b>üìô –û—Å–Ω–æ–≤–Ω–æ–µ:
       üìã –ü—Ä–æ—Ñ–∏–ª—å (‚Æï –ú–µ–Ω—é)
       üí∞ –ë–∞–ª–∞–Ω—Å (‚Æï –ú–µ–Ω—é)
       üí∏ –ë–æ–Ω—É—Å (‚Æï –ú–µ–Ω—é)
       üñä –ù–∏–∫ (‚Æï –ù–∏–∫/–Ω–∏–∫_—É–±—Ä–∞—Ç—å)
       üìç –°—Ç–∞—Ç—É—Å (‚Æï –ü—Ä–æ—Ñ–∏–ª—å)
       üìé –†–∞–±–æ—Ç—ã (‚Æï –ú–µ–Ω—é)
       üí≥ –ë–∞–Ω–∫ (‚Æï –ü—Ä–æ—Ñ–∏–ª—å)
       ü§ù –ü–µ—Ä–µ–≤–æ–¥—ã (‚Æï –ü—Ä–æ—Ñ–∏–ª—å)

üè™ –ú–∞–≥–∞–∑–∏–Ω:
       üöò –ú–∞—à–∏–Ω—ã (‚Æï –ú–µ–Ω—é)
       üèò –î–æ–º–∞ (‚Æï –ú–µ–Ω—é)
       üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã (‚Æï –ú–µ–Ω—é)

üéÆ –ò–≥—Ä—ã:
       üé∞ –ö–∞–∑–∏–Ω–æ (‚Æï –ú–µ–Ω—é)
       üî® –†–∞–±–æ—Ç–∞ (‚Æï –ú–µ–Ω—é)
       ‚öΩÔ∏è –§—É—Ç–±–æ–ª (‚Æï –ú–µ–Ω—é)
       üö® –í–∑–ª–æ–º (‚Æï –û–≥—Ä–∞–±–∏—Ç—å, –ö–∞–∑–Ω–∞, –û–≥—Ä–∞–±–∏—Ç—å –∫–∞–∑–Ω—É)
       üê† –†—ã–±–∞–ª–∫–∞ (‚Æï –†—ã–±–∞–ª–∫–∞)
       ‚õ∫Ô∏è –ü–æ—Ö–æ–¥ (‚Æï –ü–æ—Ö–æ–¥)</b>

<i>(–≤ –Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –±–æ–ª—å—à–æ–π –∞—Ä—Å–µ–Ω–∞–ª)</i>""", parse_mode='HTML', reply_markup=keyboard)
    

@router.callback_query(F.data == "home_back")
async def info(callback: CallbackQuery):
    await callback.message.edit_text("<b>üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:\n\n1Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–æ–µ\n2Ô∏è‚É£ –ò–≥—Ä—ã\n3Ô∏è‚É£ –ö–ª–∞–Ω—ã</b>", parse_mode='HTML', reply_markup=kb.info())


@router.callback_query(F.data == "games")
async def game(callback: CallbackQuery) -> None:
    await callback.answer("–†–∞–∑–¥–µ–ª 'üéÆ –ò–≥—Ä—ã' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è !", show_alert=True)



@router.message(F.text == "–ù–∏–∫")
async def nick(message: Message, state: FSMContext):
    await state.set_state(make.nick)

    await message.answer("<b>üëë –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å:</b>", parse_mode='HTML')


@router.message(make.nick)
async def msmdm(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(nick=message.text)

    if message.text.lower() == '–Ω–∏–∫_—É–±—Ä–∞—Ç—å' or message.text.lower() == 'off':
        username = message.from_user.first_name
        cursor.execute(f"UPDATE users SET nick = ? WHERE id = {message.chat.id}", (username,))
        conn.commit()
        await bot.send_message(chat_id=message.chat.id, text="<b>‚úçÔ∏è –í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–µ–±–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–∏–∫ !</b>", parse_mode='HTML')
    else:
        if len(message.text) > 11:
            await bot.send_message(chat_id=message.chat.id, text="<b>‚ùóÔ∏è –í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫ !</b>", parse_mode='HTML')
        else:
            username = message.text
            cursor.execute(f"UPDATE users SET nick = ? WHERE id = {message.chat.id}", (username,))
            conn.commit()
            await bot.send_message(chat_id=message.chat.id, text="<b>üòº –í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–µ–±–µ –Ω–æ–≤—ã–π –Ω–∏–∫ !</b>", parse_mode='HTML')

    await state.clear()
    conn.commit()


@router.message(F.text == "‚öôÔ∏è")
async def settings(message: Message) -> None:
    button1 = InlineKeyboardButton(text="–ú–µ–Ω—é: –í–∫–ª. ‚úÖ", callback_data="menu_off")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [button1]
    ])

    await message.answer("<b>üÜí –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É:</b>", parse_mode='HTML', reply_markup=keyboard)


@router.callback_query(F.data == "menu_off")
async def menu_off(callback: CallbackQuery) -> None:
    button1 = InlineKeyboardButton(text="–ú–µ–Ω—é: –í—ã–∫–ª. ‚ùå",callback_data="menu_on")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [button1]
    ])

    await callback.message.edit_text("<b>üÜí –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É:</b>", parse_mode='HTML', reply_markup=keyboard)
    await callback.message.answer("<b>‚úÖ –ú–µ–Ω—é –æ—Ç–∫–ª—é—á–µ–Ω–æ !</b>", parse_mode='HTML', reply_markup=ReplyKeyboardRemove())



@router.callback_query(F.data == "menu_on")
async def menu_on(callback: CallbackQuery) -> None:
    button1 = InlineKeyboardButton(text="–ú–µ–Ω—é: –í–∫–ª. ‚úÖ", callback_data="menu_off")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [button1]
    ])

    await callback.message.edit_text("<b>üÜí –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É:</b>", parse_mode='HTML', reply_markup=keyboard)
    await callback.message.answer("<b>‚úÖ –ú–µ–Ω—é –≤–∫–ª—é—á–µ–Ω–æ !</b>", parse_mode='HTML', reply_markup=kb.start_keyboard())